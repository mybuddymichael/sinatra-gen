#!/usr/bin/env bash

# **[sinatra-gen](https://github.com/mybuddymichael/sinatra-gen)** is a simple
# utility for creating starter [Sinatra](http://www.sinatrarb.com/) projects. It
# is written in bash, and has no other dependencies (not even Ruby).

# ## The script

# Exit the script if any function exits with a code other than 0.
set -e

# The string of help text, displayed if `-h` or `--help` are flagged or if
# `sinatra-gen` is called without any arguments.
help() {
  cat << HELP

  Usage: sinatra-gen [<options>] [<project-name>]

  Options:
    -h, --help      Display this help.
    -d, --dry-run   Don't actually create any files.
        --pride     Use 'minitest/pride' gem for tests.

  Examples:
    sinatra-gen foo
    sinatra-gen --help
    sinatra-gen -d foo

HELP
}

# ### The files
# These functions contain the text that will be added to files created by
# `sinatra-gen`.

# `foo/app.rb`
app_rb() {
  cat << APP
require 'bundler/setup'
Bundler.require

class App < Sinatra::Base

  set :root, File.dirname(__FILE__)

  register Sinatra::AssetPack
  register Mustache::Sinatra

  assets do
    serve '/js', from: '/scripts'
    serve '/css', from: '/styles'
    js :app, '/js/app.js', [
      '**/*.js' ]
    css :app, '/css/app.css', [
      '**/*.css' ]
  end

  set :mustache, {
    views: './views/',
    templates: './templates/' }
  require_relative 'views/layout'

  set :scss, {
    load_paths: [ "#{root}/styles" ],
    cache: false }

  before do
    @css = css :app
    @js  = js  :app
  end

  get '/' do
    mustache :index
  end

  run! if app_file == \$0
end
APP
}

# `foo/Gemfile`
gemfile() {
  cat << GEMFILE
source 'http://rubygems.org'

gem 'sinatra', require: 'sinatra/base'
gem 'thin'

gem 'sinatra-assetpack', require: 'sinatra/assetpack',
  git: 'https://github.com/rstacruz/sinatra-assetpack.git'

gem 'mustache', require: 'mustache/sinatra'
gem 'coffee-script'
gem 'sass'

group :test do
  gem 'minitest', require: 'minitest/autorun'${pride}
  gem 'rack-test', require: 'rack/test'
end

group :development do
  gem 'guard'
  gem 'guard-livereload'
  gem 'rb-fsevent'
end
GEMFILE
}

# `foo/Procfile`
procfile() {
  cat << PROCFILE
web: bundle exec ruby app.rb -p \$PORT
PROCFILE
}

# `foo/config.ru`
config_ru() {
  cat << CONFIG
require './app.rb'
run App
CONFIG
}

# `foo/views/layout.rb`
layout_rb() {
  cat << LAYOUT
class App
  module Views
    class Layout < Mustache

      def title
        @title || 'Hi!'
      end

      def css
        @css
      end

      def js
        @js
      end

    end
  end
end
LAYOUT
}

# `foo/templates/layout.mustache`
layout_mustache() {
  cat << LAYOUT
<!doctype html>
<html>
  <head>
    <meta charset=utf-8 />
    <title>{{ title }}</title>
    {{{ css }}}
    {{{ js }}}
  </head>
  <body>
    {{{ yield }}}
  </body>
</html>
LAYOUT
}

# `foo/views/index.rb`
index_rb() {
  cat << INDEX
class App
  module Views
    class Index < Layout
    end
  end
end
INDEX
}

# `foo/templates/index.mustache`
index_mustache() {
  cat << INDEX
<p>Hi, world!</p>
INDEX
}

# `foo/styles/reset.scss`
reset_scss() {
  cat << RESET
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font-size: 100%;
  font: inherit;
  vertical-align: baseline;
}
article, aside, details, figcaption, figure,
footer, header, hgroup, menu, nav, section {
  display: block;
}
body {
  line-height: 1;
}
ol, ul {
  list-style: none;
}
blockquote, q {
  quotes: none;
}
blockquote:before, blockquote:after,
q:before, q:after {
  content: '';
  content: none;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
RESET
}

# `foo/test/test_helper.rb`
test_helper() {
  cat << HELPER
require_relative '../app'
Bundler.require :test

class App
  class Test < MiniTest::Unit::TestCase

    def self.test(name, &block)
      define_method("test_#{name.gsub(/\W/,'_')}", &block) if block
    end

  end
end
HELPER
}

# `foo/test/routes_test.rb`
routes_test() {
  cat << ROUTES
require_relative 'test_helper'

class RoutesTest < App::Test

  include Rack::Test::Methods
  
  def app
    App
  end

  test 'get returns hi world' do
    get '/'
    assert last_response.body.include? 'Hi, world'
  end

  test 'get returns 200 status' do
    get '/'
    assert_equal 200, last_response.status
  end

  test 'can access reset.css' do
    get '/css/reset.css'
    assert_equal 200, last_response.status
    assert last_response.body.include? 'acronym'
  end

end
ROUTES
}

# Some color variables that can be used easily in strings, i.e.
# `"${red}ERROR${clr}"`.
red=$(printf "\033[31m")
grn=$(printf "\033[32m")
mgn=$(printf "\033[35m")
clr=$(printf "\033[m")

# A function for easy error printing. Shows the text as red and routes it to
# `stderr`.
error() {
  echo "  ${red}ERROR: $1${clr}" >&2
}

# Call `create()` with two parameters: `$1` is the function containing the
# default text, and `$2` is the location for the output. It will automatically
# create any necessary directories.  If called with the `-d` or `--dry-run`
# flags, it only echoes the file to be created.
create() {
  if [[ -z "$dry_run" ]]; then
    mkdir -p ${2%/*}
    $1 > $2
  fi
  echo "  ${grn}create${clr} $2"
}

# `create_project()` is called if valid parameters are passed to the script. It
# actually creates the directory and files.
create_project() {
  echo ""
  create app_rb          $1/app.rb
  create gemfile         $1/Gemfile
  create procfile        $1/Procfile
  create config_ru       $1/config.ru
  create layout_rb       $1/views/layout.rb
  create layout_mustache $1/templates/layout.mustache
  create index_rb        $1/views/index.rb
  create index_mustache  $1/templates/index.mustache
  create reset_scss      $1/styles/reset.scss
  create test_helper     $1/test/test_helper.rb
  create routes_test     $1/test/routes_test.rb
  echo ""
  echo "  ${mgn}Be sure to run \`bundle install\` to install the gems in Gemfile!${clr}"
  echo ""
}

# Check the options given by the user.
while [[ "$1" == -* ]]; do
  case "$1" in
    -h|--help)
      help
      exit;;
    -d|--dry-run)
      dry_run=1
      shift;;
    --pride)
      pride=$'\n  gem \'minitest\', require: \'minitest/pride\''
      shift;;
    -*)
      echo ""
      error "unknown argument ($1)"
      help
      exit 1;;
  esac
done

# If `-d` or `--dry-run` is called without a project name, abort the script.
if [[ -z "$*" && -n "$dry_run" ]]; then
  echo ""
  error "--dry-run must be called with a project name"
  help
  exit 1
# If the script is activated without any parameters, display the help.
elif [[ -z "$*" ]]; then
  help
  exit
# If the project name already exists as a directory, abort the script.
elif [[ -d $1 ]]; then
  echo ""
  error "directory $1 already exists"
  help
  exit 1
# Or, if parameters are valid, run `create_project()`.
else
  create_project $1
  exit
fi
