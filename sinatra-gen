#!/usr/bin/env bash

set -e

red=$(printf "\033[31m")
clr=$(printf "\033[m")

help() {
  cat << HELP

  USAGE: sinatra-gen [options] PROJECT_NAME

  OPTIONS:
    -h, --help      Display this help.
    -d, --dry-run   Don't actually create any files.

HELP
}

app_rb() {
  cat << APP
require 'bundler/setup'
Bundler.require

class App < Sinatra::Base

  # AssetPack
  register Sinatra::AssetPack

  assets do
    serve '/js', from: '/scripts'
    serve '/css', from: '/styles'
    js :app, '/js/app.js', [
      '**/*.js' ]
    css :app, '/css/app.css' [
      '**/*.css' ]
  end

  # Mustache
  register Mustache::Sinatra
  set :mustache, {
    views: './views/',
    templates: './templates/' }
  require_relative 'views/layout'

  get '/' do
    mustache :index
  end

end
APP
}

gemfile() {
  cat << GEMFILE
source 'http://rubygems.org'

gem 'sinatra', require: 'sinatra/base'
gem 'mustache', require: 'mustache/sinatra'
gem 'sinatra-assetpack', require: 'sinatra/assetpack',
  git: 'https://github.com/rstacruz/sinatra-assetpack.git'

group :development do
  gem 'guard'
  gem 'guard-livereload'
  gem 'rb-fsevent'
  gem 'shotgun'
end
GEMFILE
}

config_ru() {
  cat << CONFIG
require './app.rb'
run App
CONFIG
}

layout_rb() {
  cat << LAYOUT
class App
  module Views
    class Layout < Mustache

      def title
        @title || 'Hi!'
      end

    end
  end
end
LAYOUT
}

layout_mustache() {
  cat << LAYOUT
<!doctype html>
<html>
  <head>
    <meta charset=utf-8 />
    <title>{{ title }}</title>
  </head>
  <body>
    {{{ yield }}}
  </body>
</html>
LAYOUT
}

index_rb() {
  cat << INDEX
class App
  module Views
    class Index < Layout
    end
  end
end
INDEX
}

create_project() {
  mkdir $1
  mkdir -p $1/views
  mkdir -p $1/templates

  app_rb > $1/app.rb
  gemfile > $1/Gemfile
  config_ru > $1/config.ru
  layout_rb > $1/views/layout.rb
  layout_mustache > $1/templates/layout.mustache
  index_rb > $1/views/index.rb
}

if [[ -z "$*" ]]; then
  help
  exit
fi

while [[ "$1" == -* ]]; do
  case "$1" in
    -h|--help)
      help
      exit;;
    -*)
      echo ""
      echo "  ${red}ERROR: UNKNOWN ARGUMENT ($1)${clr}" >&2
      help
      exit 1;;
  esac
done

if [[ -d $1 ]]; then
  echo ""
  echo "  ${red}ERROR: DIRECTORY $1 ALREADY EXISTS${clr}" >&2
  help
  exit 1
else
  create_project $1
  exit
fi
